{"version":3,"sources":["Assets/logoDiccionarioEmberaEspanol.jpeg","Atoms/AppBarHeader.js","Atoms/TextInput.js","Atoms/SimpleSelect.js","Atoms/CircularLoader.js","Atoms/Translation.js","Atoms/SelectWords.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","logoStyles","width","AppBarHeader","classes","className","AppBar","position","Toolbar","src","Logo","alt","Typography","variant","input","marginTop","name","TextInput","props","useState","text","setText","noValidate","autoComplete","onSubmit","ev","preventDefault","TextField","id","label","value","onChange","event","target","handleChange","formControl","margin","minWidth","selectEmpty","SimpleSelect","languageSelect","setLanguageSelect","FormControl","InputLabel","Select","labelId","simpleSelectHandleChange","MenuItem","display","marginLeft","CircularLoader","CircularProgress","bullet","transform","fontSize","pos","marginBottom","Translation","loading","setLoading","translation","setTranslation","useEffect","wordReplacedFinal","textToTranslate","specialSymbols","textReplaced","undefined","replace","normalize","toLowerCase","entriesArray","Object","entries","palabras","temporalArrayForSavingInnerArrays","wordsFormatted","map","word","wordReplaced","index","kindOfTranslation","Array","isArray","innerWord","innerWordReplaced","push","forEach","el","includes","find","indexTwo","setTimeout","Card","CardContent","Grid","container","justify","color","gutterBottom","component","SelectWords","Spanish","setWord","selectWordsOnChange","uuid_v4","button","cardStyles","App","userTextInput","setUserTextInput","translationSelected","setTranslationSelected","selectChanged","alignContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a957615.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoDiccionarioEmberaEspanol.fd232786.jpeg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Logo from '../Assets/logoDiccionarioEmberaEspanol.jpeg'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  logoStyles: {\r\n    width: '60px',\r\n    marginRight: '10px'\r\n  }\r\n}));\r\n/**\r\n * Encabezado, es la sección que renderiza el logo y el título de la app\r\n */\r\nexport default function AppBarHeader() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {<img className={classes.logoStyles} src={Logo} alt='Logo Diccionario Español-Embera' />}\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Diccionario Español-Embera / Embera-Español\r\n          </Typography>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n// <Button color=\"inherit\">Login</Button>","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  input: {\r\n    marginTop: '8px'\r\n  }\r\n}), {\r\n  name: 'MuiFilledInput'\r\n});\r\n/**\r\n * El input typo texto que recibe lo que escribe el usuario para buscar la palabra en el objeto JSON\r\n * @param {function} handleChange Una función callback que recibe el texto del usuario y lo pasa al componente\r\n * padre APP.  \r\n */\r\nexport default function TextInput(props) {\r\n  const classes = useStyles();\r\n  const [text, setText] = useState('');\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n    props.handleChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form noValidate autoComplete=\"off\" onSubmit={(ev) => ev.preventDefault()}>\r\n      <TextField className={classes.input} id=\"filled-basic\" label=\"Ingresa la palabra o expresión a traducir\" variant=\"filled\" value={text}\r\n        onChange={handleChange} \r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  handleChange: PropTypes.func\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * Input selectivo que permite al usuario decidir que tipo de traducción realizar, esta se envia al componente\r\n * padre APP\r\n * @param {function} simpleSelectHandleChange callback que comunica al componente padre el tipo de traducción (Español-Embera/Embera-Español)\r\n   @param {string} value tipo de traducción elegida por el usuario \r\n */\r\nexport default function SimpleSelect(props) {\r\n  const classes = useStyles();\r\n  const [languageSelect, setLanguageSelect] = useState('Español-Embera');\r\n\r\n  const handleChange = (event) => {\r\n    setLanguageSelect(event.target.value);\r\n    props.simpleSelectHandleChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant=\"filled\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-filled-label\">Traducción</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-filled-label\"\r\n          id=\"demo-simple-select-filled\"\r\n          value={languageSelect}\r\n          onChange={handleChange} >\r\n          <MenuItem value={'Español-Embera'}>Español-Embera</MenuItem>\r\n          <MenuItem value={'Embera-Español'}>Embera-Español</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nSimpleSelect.propTypes = {\r\n  simpleSelectHandleChange: PropTypes.func,\r\n  value : PropTypes.string\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CircularLoader() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport palabras from '../Assets/palabras.json';\r\nimport CircularLoader from './CircularLoader';\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n    fontSize: 14\r\n  },\r\n});\r\n/**\r\n * Muestra el tipo de palabra a traducir y su traducción\r\n * @param {string} kindOfTranslation el tipo de traducción a realizar (Embera-Español o Español-Embera) \r\n * @param {string} textToTranslate es el texto a traducir, proviene de TextInput o de SelectWords\r\n */\r\nexport default function Translation(props) {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(false);\r\n  const [translation, setTranslation] = useState('');\r\n\r\n  //Comentarios:\r\n  // De forma similar a componentDidMount y componentDidUpdate en clases de React\r\n  useEffect(() => {\r\n    //En el código inferior creo el algoritmo de búsqueda de las palabras\r\n    const text = props.textToTranslate;\r\n    //elimino los símbolos especiales como ?, ! y tíldes para buscar en el objeto JSON de las palabras\r\n    const specialSymbols = /[¿?¡!]/g;\r\n    const textReplaced = text !== undefined ? text.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase() : '';\r\n    const entriesArray = Object.entries(palabras);\r\n    let wordReplacedFinal;\r\n    let temporalArrayForSavingInnerArrays = [];\r\n    let wordsFormatted = entriesArray.map((word) => {\r\n      const index = props.kindOfTranslation === 'Español-Embera' ? 0 : 1;\r\n      let wordReplaced;\r\n      //revisar si la palabra que se revisa es un arreglo\r\n      if (Array.isArray(word[index])) {\r\n        wordReplacedFinal = word[index].map((innerWord) => {\r\n          let innerWordReplaced = innerWord.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n          temporalArrayForSavingInnerArrays.push(innerWordReplaced);\r\n          return innerWordReplaced;\r\n        })\r\n\r\n      } else {\r\n        return wordReplaced = word[index].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n      }\r\n      if (index !== 0) {\r\n        wordReplacedFinal.forEach((el) => { wordReplaced = el; });\r\n      }\r\n      return wordReplaced;\r\n    });\r\n    let wordsFormattedFinal = [];\r\n    let wordsIncluded;\r\n    if (props.kindOfTranslation === 'Embera-Español') {\r\n      //si el tipo de traduccion es embera a español, pueden haber arrays anidados, hacer push con los arrays\r\n      wordsFormattedFinal = [...wordsFormatted, ...temporalArrayForSavingInnerArrays]\r\n      wordsIncluded = wordsFormattedFinal.includes(textReplaced);\r\n\r\n    } else {\r\n      wordsIncluded = wordsFormatted.includes(textReplaced);\r\n    }\r\n    if (wordsIncluded) {\r\n      entriesArray.find((word) => {\r\n        const index = props.kindOfTranslation === 'Español-Embera' ? 0 : 1;\r\n        const indexTwo = index === 0 ? 1 : 0;\r\n        let wordReplaced;\r\n        if (Array.isArray(word[index])) {\r\n          wordReplaced = word[index].map((innerWord) => innerWord.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase());\r\n        } else {\r\n          wordReplaced = word[index].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n        }\r\n        if (typeof wordReplaced !== 'object' && wordReplaced === textReplaced) {\r\n          //la palabra que se ingresa en el input coincide con una palabra en el objeto json\r\n          //y se procede a actualizar la vista con la palabra traducida\r\n          if (Array.isArray(word[indexTwo])) {\r\n            //la palabra que coincide es un array, por lo que se muestran las dos traducciones posibles\r\n            setTranslation(word[indexTwo][0] + ' / ' + word[indexTwo][1])\r\n          } else {\r\n            setTranslation(word[indexTwo]);\r\n          }\r\n          setLoading(true);\r\n        } else if (typeof wordReplaced === 'object') {\r\n          //es un arreglo y es necesario iterar para comparar \r\n          wordReplaced.forEach((el) => {\r\n            if (el === textReplaced) {\r\n              //la palabra que se ingresa en el input coincide con una palabra en el objeto json\r\n              //y se procede a actualizar la vista con la palabra traducida\r\n              setTranslation(word[indexTwo])\r\n              setLoading(true);\r\n            }\r\n          })\r\n        }\r\n        return null;\r\n      }\r\n      )\r\n    } else if (textReplaced !== '') {\r\n      setTranslation('Palabra no encontrada');\r\n    } else {\r\n      setTranslation('');\r\n    }\r\n\r\n  }, [props.textToTranslate, props.kindOfTranslation]);\r\n  useEffect(() => {\r\n    //Agrego el loader por un segundo y medio antes de mostrar la palabra traducida\r\n    setTimeout(() => setLoading(false), 1500);\r\n  }, [loading]);\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Grid container justify='center'>\r\n          <Typography className={classes.title} color=\"primary\" gutterBottom>\r\n            {props.kindOfTranslation}\r\n          </Typography>\r\n        </Grid>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Palabra\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.textToTranslate}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          Traducción\r\n        </Typography>\r\n        {loading ?\r\n          <CircularLoader /> :\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {translation}\r\n          </Typography>}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nTranslation.propTypes = {\r\n  kindOfTranslation: PropTypes.string,\r\n  textToTranslate: PropTypes.string\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport palabras from '../Assets/palabras.json';\r\nimport { v4 as uuid_v4 } from \"uuid\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 128,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}), { name: 'MuiFilledInput' });\r\n\r\n/**\r\n * Despliega una lista seleccionable con las palabras incluídas en el archivo palabras.json\r\n * @param {function} selectWordsOnChange  es un callbak que envia la palabra seleccionada al componente padre App\r\n   @param {boolean} Spanish es un booleano que indica si la palabra a traducir es en Español o en Embera\r\n */\r\nexport default function SelectWords(props) {\r\n  const classes = useStyles();\r\n  const [word, setWord] = useState(props.Spanish ? '¿Cómo estás?' : 'Sa buma');\r\n  const handleChange = (event) => {\r\n    setWord(event.target.value);\r\n    props.selectWordsOnChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant=\"filled\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-filled-label\">{props.Spanish ? 'Lista de Palabras Español' : 'Lista de Palabras Embera'}</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-filled-label\"\r\n          id=\"demo-simple-select-filled\"\r\n          value={word}\r\n          onChange={handleChange}\r\n        >\r\n          {Object.entries(palabras).map((word) => {\r\n            if (props.Spanish) {\r\n              return <MenuItem key={uuid_v4()} value={word[0]}>{word[0]}</MenuItem>\r\n            } else if (Array.isArray(word[1])) {\r\n              return word[1].map((word) => <MenuItem value={word} key={uuid_v4()}>{word}</MenuItem>);\r\n            } else {\r\n              return <MenuItem key={uuid_v4()} value={word[1]}>{word[1]}</MenuItem>\r\n            }\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nSelectWords.propTypes = {\r\n  selectWordsOnChange: PropTypes.func,\r\n  Spanish : PropTypes.bool\r\n};","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport AppBarHeader from './Atoms/AppBarHeader';\nimport TextInput from './Atoms/TextInput';\nimport SimpleSelect from './Atoms/SimpleSelect';\nimport Translation from './Atoms/Translation';\nimport SelectWords from './Atoms/SelectWords';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop: '5px'\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  cardStyles: {\n    flexGrow: 1,\n    marginTop: '15px'\n  }\n}));\n\n/**\n * Punto de entrada de la aplicación, renderiza toda la app. \n */\nfunction App() {\n  const classes = useStyles();\n  const [userTextInput, setUserTextInput] = useState('');\n  const [translationSelected, setTranslationSelected] = useState('Español-Embera');\n  const handleChange = (ev) => setUserTextInput(ev);\n  const selectChanged = (ev) => setUserTextInput(ev);\n  const simpleSelectHandleChange = (ev) => setTranslationSelected(ev);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBarHeader />\n      </header>\n      <section>\n        <Grid container className={classes.root} spacing={2} justify='center' alignContent='center'>\n          <TextInput\n            handleChange={handleChange} />\n          <SimpleSelect\n            simpleSelectHandleChange={simpleSelectHandleChange}\n            value={translationSelected} />\n          <SelectWords Spanish={true} selectWordsOnChange={selectChanged} />\n          <SelectWords Spanish={false} selectWordsOnChange={selectChanged} />\n        </Grid>\n      </section>\n      <section>\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\n          <Translation textToTranslate={userTextInput}\n            kindOfTranslation={translationSelected} />\n        </Grid>\n      </section>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}