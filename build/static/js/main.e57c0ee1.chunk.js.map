{"version":3,"sources":["Redux/reducers.js","Redux/store.js","Assets/logo.png","Atoms/AppBarHeader.js","Atoms/DatePicker.js","Redux/actions.js","Atoms/ButtonLotes.js","Atoms/CapasInfo.js","Atoms/Capas.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","reducer","combineReducers","setLotesData","state","action","name","undefined","payload","Object","keys","type","store","createStore","window","devToolsExtension","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","logoStyles","width","borderRadius","AppBarHeader","classes","className","AppBar","position","Toolbar","src","Logo","alt","Typography","variant","container","display","flexWrap","textField","checkBoxStyles","marginTop","colors","numDaysBetween","d1","d2","Math","abs","getTime","DatePicker","props","useState","fecha","date","setDate","checked","setChecked","ocultar","setOcultar","useEffect","currentDate","Date","datePickerDate","diff","parse","numberFrecuencia","data","id","dispatch","lotesData","Grid","style","backgroundColor","direction","justify","alignContent","TextField","label","defaultValue","InputLabelProps","shrink","onChange","ev","target","value","Checkbox","inputProps","buttonStyles","parentGrid","marginBottom","innerGrid","paperStyles","connect","lotesInfo","lotes","lotesDivision","dynamicBackgroundColorAbono","dynamicBackgroundColorVenenos","lotesInfoLength","length","abonosChecked1","abonos1","abonosChecked2","abonos2","selectedDateAbono1","toUTCString","selectedDateAbono2","venenosChecked1","venenos1","venenosChecked2","venenos2","selectedDateVenenos1","selectedDateVenenos2","datePickerDateAbono1","datePickerDateAbono2","diffAbono1","diffAbono2","currentDateVenenos","datePickerDateVeneno1","datePickerDateVeneno2","diffVeneno1","diffVeneno2","abonoButton","Button","venenosButton","index","push","Paper","item","uuid","margin","divStyles","minWidth","maxWidth","padding","height","containerPaperStyles","border","CapasInfo","frecuenciaDates","frecuencias","entries","forEach","el","frecuenciaAnual","fechas","values","wrap","cultivo","elevation","textFieldStyles","fincaInfo","nombre","nm","mas","menos","hectareas","ph","correccionPh","precio","tipo","cultivos","abonos","tipos","venenos","venenoPara","plagas","variedades","egresos","primerSemestre","manoDeObra","insumos","alimentos","serviciosPublicos","ingresos","cafe","platano","acuacate","pasto","animales","costoAnimal","Capas","infoFinca","setInfoFinca","toString","setCultivos","newInfo","setNewInfo","component","size","newValue","align","costoCorreccion","event","color","onClick","split","map","button","cardStyles","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Helmet","charSet","document","getElementById"],"mappings":"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","file":"static/js/main.e57c0ee1.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\r\nimport { lotesData } from './actions';\r\n//this is the initial redux state\r\nconst initialState = {\r\n}\r\n\r\n\r\n\r\nlet setLotesData = (state = initialState, action) => {\r\n  const name = action.payload !== undefined ? Object.keys(action.payload)[0] : 'name';\r\n  if(name === 'name'){return state}\r\n  switch(action.type){\r\n    case 'set_lotes_data':\r\n    return  {\r\n      ...state,\r\n        [name] : {...action.payload[name]}\r\n       } \r\n    \r\n    default :\r\n    return state;\r\n  }\r\n}\r\nexport const reducer = combineReducers({\r\n  setLotesData\r\n})","import { createStore } from \"redux\";\r\nimport {reducer} from \"./reducers\";\r\n\r\nconst store = createStore(reducer,\r\nwindow.devToolsExtension && window.devToolsExtension());\r\nexport default store;","export default __webpack_public_path__ + \"static/media/logo.be782e3f.png\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Logo from '../Assets/logo.png'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  logoStyles: {\r\n    width: '60px',\r\n    marginRight: '10px',\r\n    borderRadius : '50%'\r\n  }\r\n}));\r\n/**\r\n * Encabezado, es la sección que renderiza el logo y el título de la app\r\n */\r\nexport default function AppBarHeader() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {<img className={classes.logoStyles} src={Logo} alt='Logo Finca' />}\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Administrador Finca\r\n          </Typography>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n// <Button color=\"inherit\">Login</Button>","import React, {useState, useEffect} from 'react';\r\nimport store from '../Redux/store';\r\nimport {lotesData} from '../Redux/actions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    width: 200,\r\n  },\r\n  checkBoxStyles : {\r\n    marginTop : 'auto'\r\n  }\r\n}));\r\nconst colors = {\r\n  'abonos' : 'aliceblue',\r\n  'venenos' : 'antiquewhite',\r\n  'cosechas' :  'greenyellow'\r\n}\r\nconst numDaysBetween = function(d1, d2) {\r\n  const diff = Math.abs(d1.getTime() - d2.getTime());\r\n  return diff / (1000 * 60 * 60 * 24);\r\n};\r\n\r\nexport default function DatePicker(props) {\r\n  const classes = useStyles();\r\n  const [date, setDate] = useState(props.fecha);\r\n  const [checked, setChecked] = useState(false);\r\n  const [ocultar, setOcultar] = useState(false);\r\n  useEffect(()=>{\r\n    //did mount\r\nconst currentDate = new Date();\r\nconst datePickerDate = new Date(date);\r\nconst diff =numDaysBetween(currentDate, datePickerDate);\r\nif(Date.parse(currentDate) > Date.parse(datePickerDate)){\r\n  //si la fecha actual es mayor a la del picker la diferencia es\r\n  //que faltan x cantidad de dias para llegar a la fecha actual\r\n  //console.log('faltan ', diff, ' dias para la fecha actual');\r\n \r\n} else {\r\n // console.log('faltan ', diff, 'cantidad de dias para alcanzar la fecha del picker')\r\n//si no se ha llegado a la fecha, no se ha abonado o fumigado,\r\n//entonces si faltan mas de 3 dias  no se debe colocar el checked\r\nif(diff > 3  ){\r\n  setOcultar(true)\r\n} else {\r\n  //estamos en los tres dias anteriores a la fecha, colocar el checked\r\n  setOcultar(false);\r\n}\r\n}\r\n \r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    const name = props.name + props.numberFrecuencia;\r\n    const currentDate = new Date();\r\n  const datePickerDate = new Date(date);\r\n  const diff =numDaysBetween(currentDate, datePickerDate);\r\n  if(Date.parse(currentDate) > Date.parse(datePickerDate)){\r\n    //si la fecha actual es mayor a la del picker la diferencia es\r\n    //que faltan x cantidad de dias para llegar a la fecha actual\r\n    //console.log('faltan ', diff, ' dias para la fecha actual');\r\n    setOcultar(false)\r\n  } else {\r\n    //console.log('faltan ', diff, 'cantidad de dias para alcanzar la fecha del picker');\r\n    if(diff > 3  ){\r\n     setOcultar(true);\r\n    } else {\r\n      //estamos en los tres dias anteriores a la fecha, colocar el checked\r\n      setOcultar(false)\r\n    }\r\n  }\r\n    const data = {\r\n      [name] : {\r\n        checked : checked,\r\n        date : date,\r\n        id : props.name + ',' + props.numberFrecuencia\r\n      }\r\n     \r\n    }\r\n    store.dispatch(lotesData(data))\r\n\r\n    \r\n  \r\n  },[date, checked])\r\n  \r\n  const handleChange = (ev) => {\r\n    setChecked(ev.target.checked);\r\n  };\r\n  const dateChange = (ev)=>{\r\n    setDate(ev.target.value);\r\n  }\r\n  return (\r\n    <Grid style={{backgroundColor : colors[props.name]}}container direction='row' justify='center' alignContent='center'>\r\n      <TextField\r\n        id={props.name + ',' + props.numberFrecuencia}\r\n        label={`Fecha ${props.numberFrecuencia} ${props.name}`}\r\n        type=\"date\"\r\n        defaultValue={date}\r\n        className={classes.textField}\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        onChange={dateChange}\r\n      />\r\n      {ocultar ? null : \r\n      \r\n       <Checkbox\r\n       id={props.name + ',' + props.numberFrecuencia}\r\n       className={classes.checkBoxStyles}\r\n        checked={checked}\r\n        onChange={handleChange}\r\n        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n      />\r\n      }\r\n      </Grid>\r\n  );\r\n}\r\n","\r\n  const lotesData = (data) => {\r\n    return {\r\n      type : 'set_lotes_data',\r\n      payload : data\r\n    }\r\n  }\r\n \r\n  \r\n  export {lotesData}","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { uuid } from 'uuidv4';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   \r\n    buttonStyles : {\r\n      width : '100%'\r\n    },\r\n    parentGrid : {\r\n      marginBottom : 10\r\n    },\r\n    innerGrid : {\r\n      flexGrow : 1\r\n        },\r\n    paperStyles : {\r\n      marginBottom : 10\r\n    }\r\n  }));\r\n\r\n  const numDaysBetween = function(d1, d2) {\r\n    const diff = Math.abs(d1.getTime() - d2.getTime());\r\n    return diff / (1000 * 60 * 60 * 24);\r\n  };\r\n  \r\n  \r\nconst ButtonLotes = (props)=>{\r\n    const classes = useStyles();\r\n    let lotes = props.lotes;\r\n    let lotesDivision = [];\r\n    let dynamicBackgroundColorAbono = 'gray';\r\n    let dynamicBackgroundColorVenenos = 'gray';\r\n    //revisar si el checkbox dice true o null, si es asi colocar el fondo verde\r\n    const lotesInfoLength = Object.keys(props.lotesInfo)\r\n    if(props.lotes === undefined || lotesInfoLength.length === 0){return null} else {\r\n        const abonosChecked1 = props.lotesInfo.abonos1.checked ;\r\n        const abonosChecked2 = props.lotesInfo.abonos2.checked;\r\n       // const infoDatePickerAbono1 = props.lotesInfo.abonos1.id.split(',');\r\n       // const infoDatePickerAbono2 = props.lotesInfo.abonos2.id.split(',');\r\n        const selectedDateAbono1 = new Date(Date.parse(props.lotesInfo.abonos1.date)).toUTCString(); \r\n        const selectedDateAbono2 = new Date(Date.parse(props.lotesInfo.abonos2.date)).toUTCString(); \r\n        \r\n        const venenosChecked1 = props.lotesInfo.venenos1.checked ;\r\n        const venenosChecked2 = props.lotesInfo.venenos2.checked;\r\n       // const infoDatePickerVenenos1 = props.lotesInfo.venenos1.id.split(',');\r\n       // const infoDatePickerVenenos2 = props.lotesInfo.venenos2.id.split(',');\r\n        const selectedDateVenenos1 = new Date(Date.parse(props.lotesInfo.venenos1.date)).toUTCString(); \r\n        const selectedDateVenenos2 = new Date(Date.parse(props.lotesInfo.venenos2.date)).toUTCString(); \r\n        \r\n        //asignar color abonos\r\n        const currentDate = new Date();\r\n        const datePickerDateAbono1 = new Date(selectedDateAbono1);\r\n        const datePickerDateAbono2 = new Date(selectedDateAbono2);\r\n        const diffAbono1 =numDaysBetween(currentDate, datePickerDateAbono1);\r\n        const diffAbono2 =numDaysBetween(currentDate, datePickerDateAbono2);\r\n\r\n        //ABONO1\r\n        if(currentDate < datePickerDateAbono1){\r\n            //la fecha actual es inferior a la fecha del abono1\r\n           // console.log('fecha actual inferior a fecha abono1');\r\n            //si la fecha de abono 1 esta a tres dias de la fecha actual, establecer color amarillo si checked es false\r\n            if(diffAbono1 < 3 && !abonosChecked1){\r\n                dynamicBackgroundColorAbono = 'yellow'\r\n            } else {\r\n                 //la diferencia es mayor a 3 dias, el color debe ser verde si abono2 es true ya que se ignora abono1checked\r\n                 if(abonosChecked2){\r\n                    dynamicBackgroundColorAbono = 'green'\r\n                } \r\n            }\r\n\r\n        } else {\r\n           // console.log('fecha actual es mayor a fecha abono1');\r\n            //si la fecha actual es mayor a la del abono1 el estado de abono1 debe ser true, de lo contario no se abono y el color debe ser rojo\r\n            if(!abonosChecked1)\r\n            dynamicBackgroundColorAbono = 'red'\r\n        }\r\n\r\n        //ABONO2\r\n        if(currentDate < datePickerDateAbono2){\r\n            //la fecha actual es inferior a la fecha del abono2\r\n           // console.log('fecha actual inferior a fecha abono2');\r\n            //si la fecha de abono 2 esta a tres dias de la fecha actual, establecer color amarillo si checked es false\r\n            if(diffAbono2 < 3 && !abonosChecked2){\r\n                dynamicBackgroundColorAbono = 'yellow'\r\n            } else {\r\n                //la diferencia es mayor a 3 dias, el color debe ser verde si abono1 es true ya que se ignora abono2checked\r\n                if(abonosChecked1){\r\n                    dynamicBackgroundColorAbono = 'green'\r\n                } \r\n            }\r\n\r\n        } else {\r\n            //console.log('fecha actual es mayor a fecha abono2');\r\n            //si la fecha actual es mayor a la del abono2 el estado de abono2 debe ser true, de lo contario no se abono y el color debe ser rojo\r\n            if(!abonosChecked2)\r\n            dynamicBackgroundColorAbono = 'red'\r\n        }\r\n\r\n        //Sin importar las fechas, si los dos estados de los abonos son true, el color debe ser  verde\r\n        if(abonosChecked1 && abonosChecked2){\r\n             dynamicBackgroundColorAbono = 'green';\r\n        }\r\n        //FIN COMPARADOR ABONOS\r\n\r\n         //asignar color venenos\r\n         const currentDateVenenos = new Date();\r\n         const datePickerDateVeneno1 = new Date(selectedDateVenenos1);\r\n         const datePickerDateVeneno2 = new Date(selectedDateVenenos2);\r\n         const diffVeneno1 =numDaysBetween(currentDateVenenos, datePickerDateVeneno1);\r\n         const diffVeneno2 =numDaysBetween(currentDateVenenos, datePickerDateVeneno2);\r\n \r\n         //VENENO1\r\n         if(currentDateVenenos < datePickerDateVeneno1){\r\n             //la fecha actual es inferior a la fecha del veneno1\r\n             //si la fecha de veneno 1 esta a tres dias de la fecha actual, establecer color amarillo si checked es false\r\n             if(diffVeneno1 < 3 && !venenosChecked1){\r\n                 dynamicBackgroundColorVenenos = 'yellow'\r\n             } else {\r\n                  //la diferencia es mayor a 3 dias, el color debe ser verde si veneno2 es true ya que se ignora veneno1checked\r\n                  if(venenosChecked2){\r\n                     dynamicBackgroundColorVenenos = 'green'\r\n                 } \r\n             }\r\n \r\n         } else {\r\n             //si la fecha actual es mayor a la del veneno1 el estado de veneno1 debe ser true, de lo contario no se fumigo y el color debe ser rojo\r\n             if(!venenosChecked1)\r\n             dynamicBackgroundColorVenenos = 'red'\r\n         }\r\n \r\n         //VENENO2\r\n         if(currentDateVenenos < datePickerDateVeneno2){\r\n             if(diffVeneno2 < 3 && !venenosChecked2){\r\n                 dynamicBackgroundColorVenenos = 'yellow'\r\n             } else {\r\n                 if(venenosChecked1){\r\n                     dynamicBackgroundColorVenenos = 'green'\r\n                 } \r\n             }\r\n \r\n         } else {\r\n              if(!venenosChecked2)\r\n             dynamicBackgroundColorVenenos = 'red'\r\n         }\r\n \r\n         //Sin importar las fechas, si los dos estados de los venenos son true, el color debe ser  verde\r\n         if(venenosChecked1 && venenosChecked2){\r\n              dynamicBackgroundColorVenenos = 'green';\r\n         }\r\n\r\n        \r\n      const abonoButton =  \r\n      <Button style={{backgroundColor : dynamicBackgroundColorAbono}} variant=\"contained\" className={classes.buttonStyles}>\r\n              <Typography variant=\"subtitle2\" >\r\n            Abonos\r\n          </Typography>\r\n          </Button>;\r\n    const venenosButton =  \r\n    <Button style={{backgroundColor : dynamicBackgroundColorVenenos}} variant=\"contained\" className={classes.buttonStyles}>\r\n    <Typography variant=\"subtitle2\" >\r\n    Venenos\r\n  </Typography>\r\n</Button>;\r\n    \r\n      let index = 0;\r\n      for(lotes; lotes > 0; lotes--){\r\n        index++;\r\n        //revisar la fecha de abono numero \r\n        //si el estado del checker es true o null el boton debe ser verde\r\n        lotesDivision.push(\r\n          <Grid key={uuid()} container  justify='center' alignContent='center'>\r\n            <Paper className={classes.paperStyles}>\r\n            <Grid container  justify='center' alignContent='center' className={classes.parentGrid}>\r\n            <Typography variant=\"body1\" >\r\n            Lote {index}\r\n      \r\n          </Typography> \r\n            <Grid container  direction='row' justify='center' alignContent='center'>\r\n            <Grid item   className={classes.innerGrid}>\r\n            {//revisar si el checker es true o null\r\n                        abonoButton\r\n            }\r\n            {/*<Button variant=\"contained\" className={classes.buttonStyles}>\r\n              <Typography variant=\"subtitle2\" >\r\n            Abonos\r\n          </Typography>\r\n          </Button>*/}\r\n            \r\n            </Grid>\r\n            <Grid item    className={classes.innerGrid}>\r\n          {venenosButton}\r\n             </Grid> \r\n             </Grid>\r\n            </Grid>\r\n            </Paper>\r\n            </Grid>\r\n      \r\n        )\r\n            \r\n      } \r\n      return lotesDivision;\r\n    }\r\n \r\n  }\r\n\r\n  function mapStateToProps(state) { \r\n    return {\r\n       lotesInfo : state.setLotesData\r\n    };\r\n  };\r\n  export default connect(mapStateToProps)(ButtonLotes)\r\n  \r\n\r\n","import React, {useState} from 'react';\r\nimport DatePicker from './DatePicker';\r\nimport ButtonLotes from './ButtonLotes';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { uuid } from 'uuidv4';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    margin : '2px'\r\n  },\r\n  divStyles : {\r\n    minWidth : 256,\r\n    maxWidth : 256,\r\n    margin: 5,\r\n    padding: 10\r\n  },\r\n  paperStyles : {\r\n    height : '100%',\r\n    width: '100%',\r\n    padding: 10,\r\n    margin: 5\r\n  },\r\n  containerPaperStyles : {\r\n    flexGrow : 1\r\n  },\r\n  buttonStyles : {\r\n    width : '100%'\r\n  },\r\n  parentGrid : {\r\n    border : 'solid 1px',\r\n    marginBottom : 10\r\n  },\r\n  innerGrid : {\r\n    flexGrow : 1\r\n      }\r\n}));\r\n\r\n\r\n/**\r\n * Elemento que muestras la info de cada capa\r\n */\r\nexport default function CapasInfo(props) {\r\n  const classes = useStyles();\r\n  let infoDatePickerState =[];\r\n  let frecuenciaDates = [];\r\n\r\n  if(props.frecuencias !== null ){\r\n    const frecuenciaEntries = Object.entries(props.frecuencias);\r\n   frecuenciaEntries.forEach((el)=>{\r\n    let frecuenciaAnual = el[1][1].frecuenciaAnual;\r\n    let fechas = Object.values(el[1][1].fechas); \r\n    let numberFrecuencia = 0;\r\n    for (frecuenciaAnual; frecuenciaAnual > 0; frecuenciaAnual--){\r\n\r\n      numberFrecuencia ++;\r\n      frecuenciaDates.push(<DatePicker key={uuid()} name={el[1][0]} numberFrecuencia={numberFrecuencia} \r\n        fecha={fechas[numberFrecuencia -1]}  />)\r\n    }\r\n    })\r\n  } else {\r\n    //  \r\n  }\r\n  return (\r\n    <Paper className={classes.divStyles}>\r\n<Grid container className={classes.root} justify='center' wrap='wrap' alignContent='center'>\r\n{frecuenciaDates}\r\n    <Typography variant=\"h5\"  >\r\n             {props.cultivo}\r\n      </Typography> \r\n      <Paper className={classes.paperStyles} elevation={3} >\r\n      <Grid container className={classes.containerPaperStyles} spacing={2} justify='center' alignContent='center'>\r\n      <ButtonLotes lotes={props.lotes} />\r\n        </Grid>\r\n        </Paper>\r\n</Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport CapasInfo from './CapasInfo';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { uuid } from 'uuidv4';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginBottom: 10\r\n    },\r\n    textFieldStyles: {\r\n        margin: 5\r\n    },\r\n    buttonStyles : {\r\n        marginTop : 5\r\n    }\r\n}));\r\n\r\nconst fincaInfo = {\r\n        nombre : 'El Socorro',\r\n        nm: {\r\n            mas : 1680,\r\n            menos : 1720\r\n        },\r\n        hectareas: 12,\r\n        ph: {'Mínimo'  : 5.5, 'Máximo' : 6.5},\r\n        correccionPh:\r\n        {\r\n            frecuenciaAnual: 1,\r\n            precio: 900000,\r\n            tipo : 'caldolimta'\r\n        },\r\n      \r\n    cultivos: {\r\n        ['Café']: {\r\n            lotes : 4,\r\n            frecuencias : {\r\n                abonos: {\r\n                    frecuenciaAnual: 2,\r\n                    fechas : ['2020-02-02', '2020-08-18'],\r\n                    tipos: ['urea', 'dap', 'potacio kcl']\r\n                },\r\n                venenos: {\r\n                    frecuenciaAnual: 2,\r\n                    fechas : ['2020-06-26', '2020-12-28'],\r\n                    venenoPara: 'roya',\r\n                    plagas: ['broca', 'hongo roya mancha de hierro']\r\n                },\r\n               /*\r\n                cosechas: {\r\n                    frecuenciaAnual : 4,\r\n                    fechas : ['2020-03-15', '2020-04-15', '2020-09-15', '2020-11-30'],\r\n                }*/\r\n            },\r\n            variedades: ['castilla rosario', 'castilla naranjal', 'cenicafe 1', 'san bernardo',\r\n            'catimor', 'supremo'\r\n        ],\r\n        },\r\n        ['Plátano']: {\r\n\r\n        },\r\n        Aguacate: {\r\n\r\n        },\r\n        Pasto: {\r\n\r\n        }\r\n    },\r\n    egresos: {\r\n        primerSemestre: {\r\n            manoDeObra: 23815000,\r\n            insumos: 8224000,\r\n            alimentos: 3387000,\r\n            serviciosPublicos: 0\r\n        }\r\n    },\r\n    ingresos: {\r\n        primerSemestre: {\r\n            cafe: 50490000,\r\n            platano: 5660000,\r\n            acuacate: 6600000,\r\n            pasto: {\r\n                animales: 4,\r\n                costoAnimal: 1700000\r\n            }\r\n        }\r\n    },\r\n\r\n}\r\n/**\r\n * Elemento que distribuye las capas \r\n */\r\nexport default function Capas() {\r\n    const classes = useStyles();\r\n    const [infoFinca, setInfoFinca] = useState({...fincaInfo});\r\n    const [cultivos, setCultivos] = useState(Object.keys(infoFinca.cultivos).toString());\r\n    const [newInfo, setNewInfo] = useState(false);\r\n   const [cultivosArray, setCultivosArray] = useState([]);\r\n    const handleCultivosChange = (event) => {\r\n        setCultivos(event.target.value);\r\n      };\r\n      const handleButtonClick = ()=>{\r\n        setNewInfo(true);\r\n      }\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container className={classes.root} direction='column' justify='center' alignContent='center'>\r\n\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  1.  Información de la Finca\r\n      </Typography>\r\n\r\n            </Grid>\r\n            <Grid container className={classes.root} justify='center' alignContent='center'>\r\n\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Nombre\" value={infoFinca.nombre } onChange={(ev)=>setInfoFinca({...infoFinca, nombre : ev.target.value})}variant=\"outlined\" />\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Hectareas\" value={infoFinca.hectareas } onChange={(ev)=>setInfoFinca({...infoFinca, hectareas : ev.target.value})}variant=\"outlined\" type='number' />\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Nm >\" value={infoFinca.nm.mas } onChange={(ev)=>{\r\n                    let newValue = {...infoFinca};\r\n                    infoFinca.nm.mas = ev.target.value;\r\n                    setInfoFinca({...newValue});\r\n                }}variant=\"outlined\" type='number' />\r\n                <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Nm <\" value={infoFinca.nm.menos } onChange={(ev)=>{\r\n                    let newValue = {...infoFinca};\r\n                    infoFinca.nm.menos = ev.target.value;\r\n                    setInfoFinca({...newValue});\r\n                }}variant=\"outlined\" type='number' />\r\n\r\n            </Grid>\r\n         <Grid container direction='column' justify='center' alignContent='center'>\r\n                        <Typography variant=\"h5\" component=\"h2\" align='center'>\r\n                            PH\r\n                         </Typography>\r\n\r\n                        <Grid container justify='center'  alignContent='center'>\r\n                            <Grid container justify='center' direction='column' alignContent='center'>\r\n                                <Typography variant=\"subtitle1\" component=\"h2\" align='center'>\r\n                                    Rango PH\r\n      </Typography>\r\n                                <Grid container justify='center' alignContent='center'>\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Minimo\" \r\n                                    value={infoFinca.ph['Mínimo'] }\r\n                                     onChange={(ev)=>{\r\n                                            let newValue = {...infoFinca};\r\n                                            newValue.ph['Mínimo'] = ev.target.value;\r\n                                            setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\" type='number' />\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Máximo\"\r\n                                     value={infoFinca.ph['Máximo'] } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.ph['Máximo'] = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }}variant=\"outlined\" type='number' />\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                            <Grid container justify='center' direction='column' alignContent='center'>\r\n                                <Typography variant=\"subtitle1\" component=\"h2\" align='center'>\r\n                                    Corrección PH\r\n      </Typography>\r\n                                <Grid container justify='center' alignContent='center'>\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Frecuencia al año\" value={infoFinca.correccionPh.frecuenciaAnual } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.correccionPh.frecuenciaAnual = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\" type='number' />\r\n                                    <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Costo Correccion PH\" value={infoFinca.correccionPh.precio } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.correccionPh.costoCorreccion = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\" type='number' />\r\n                                     <TextField className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Tipo\" value={infoFinca.correccionPh.tipo } \r\n                                    onChange={(ev)=>{\r\n                                        let newValue = {...infoFinca};\r\n                                        newValue.correccionPh.tipo = ev.target.value;\r\n                                        setInfoFinca({...newValue})\r\n                                    }} variant=\"outlined\"  />\r\n\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container direction='column' justify='center' alignContent='center'>\r\n                        <Typography variant=\"h5\" component=\"h2\" align='center'>\r\n                            Cultivos\r\n                         </Typography>\r\n\r\n                        <Grid container justify='center'  alignContent='center'>\r\n                            <Grid container justify='center' direction='column' alignContent='center'>\r\n                                <Typography variant=\"subtitle1\" component=\"h2\" align='center'>\r\n                                    Añada los cultivos separados por comas\r\n      </Typography>\r\n                                <Grid container justify='center' alignContent='center'>\r\n                                    <TextField value={cultivos} onChange={handleCultivosChange} className={classes.textFieldStyles} size='small' id=\"outlined-basic\" label=\"Cultivos\" variant=\"outlined\" />\r\n                 \r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                         \r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n            \r\n                    <Grid container className={classes.root} justify='center' alignContent='center'>\r\n\r\n                    <Button className={classes.buttonStyles} variant=\"contained\" color=\"primary\" onClick={handleButtonClick}>\r\n  Añadir Información\r\n</Button>\r\n</Grid>\r\n            <Grid container className={classes.root} direction='column' justify='center' alignContent='center'>\r\n\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                    Capas\r\n      </Typography>\r\n  \r\n\r\n            </Grid>\r\n            <Grid container className={classes.root} spacing={2} wrap='wrap' justify='center' alignContent='center'>\r\n                {newInfo ? cultivos.split(',').map((el) => {\r\n                     return (\r\n                        <CapasInfo  key={uuid()} cultivo={el} frecuencias={null} />\r\n                    )\r\n                }) : \r\n                Object.entries(infoFinca.cultivos).map((el)=>{\r\n                    return(\r\n                        <CapasInfo key={uuid()} lotes={el[1].lotes} cultivo={el[0]} frecuencias={ Object.keys(el[1]).length > 0 ? Object.entries(el[1].frecuencias) : null} />\r\n                    )\r\n                })\r\n            }\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppBarHeader from './Atoms/AppBarHeader';\r\nimport Capas from './Atoms/Capas';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: '5px'\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  cardStyles: {\r\n    flexGrow: 1,\r\n    marginTop: '15px'\r\n  }\r\n}));\r\n\r\n/**\r\n * Punto de entrada de la aplicación, renderiza toda la app. \r\n */\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [userTextInput, setUserTextInput] = useState('');\r\n  const [translationSelected, setTranslationSelected] = useState('Español-Embera');\r\n  const handleChange = (ev) => setUserTextInput(ev);\r\n  const selectChanged = (ev) => setUserTextInput(ev);\r\n  const simpleSelectHandleChange = (ev) => setTranslationSelected(ev);\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <AppBarHeader />\r\n      </header>\r\n      <section>\r\n        <Grid container className={classes.root} spacing={2} justify='center' alignContent='center'>\r\n          <Capas />\r\n        </Grid>\r\n      </section>\r\n      <section>\r\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\r\n        </Grid>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Helmet } from 'react-helmet'\r\nimport { Provider } from 'react-redux'\r\nimport store from './Redux/store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Helmet>\r\n      <meta charSet=\"utf-8\" />\r\n      <title>Administrador Finca</title>\r\n    </Helmet>\r\n    <Provider store={store}>\r\n    <App  />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}